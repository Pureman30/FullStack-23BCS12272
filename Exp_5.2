// Select DB
use studentsdb;

// Start clean
db.students.drop();

/* -------- Inserts -------- */
db.students.insertMany([
  { name: "Alice Johnson",  age: 20, course: "Computer Science" },
  { name: "Bob Smith",      age: 22, course: "Mechanical Engineering" },
  { name: "Charlie Lee",    age: 19, course: "Business Administration" }
]);

/* -------- Helpful Indexes -------- */
db.students.createIndex({ name: 1 });
db.students.createIndex({ course: 1 });

/* -------- Reads -------- */
// Get all students
db.students.find({});

// Get one by ObjectId (replace with a real _id from your DB)
const aliceId = db.students.findOne({ name: "Alice Johnson" })._id;
db.students.find({ _id: aliceId });

// Paginate and sort (page 1 size 2 by name asc)
db.students.find({}).sort({ name: 1 }).skip(0).limit(2);

// Projection: only name and course
db.students.find({}, { name: 1, course: 1 });

// Filter by course
db.students.find({ course: "Mechanical Engineering" });

// Count per course
db.students.aggregate([
  { $group: { _id: "$course", count: { $sum: 1 } } },
  { $sort: { count: -1 } }
]);

/* -------- Creates -------- */
// Create single
db.students.insertOne({ name: "David Miller", age: 21, course: "Electrical Engineering" });

// Create many
db.students.insertMany([
  { name: "Ella Perez", age: 23, course: "Computer Science" },
  { name: "Farhan Ali", age: 24, course: "Civil Engineering" }
]);

/* -------- Updates -------- */
// Replace whole document by id (example)
const bobId = db.students.findOne({ name: "Bob Smith" })._id;
db.students.replaceOne(
  { _id: bobId },
  { name: "Bob Smith", age: 23, course: "Mechanical Engineering" }
);

// Partial update: set fields
db.students.updateOne(
  { name: "Alice Johnson" },
  { $set: { age: 21 } }
);

// Partial update with validation logic example: increment age
db.students.updateMany(
  { course: "Computer Science" },
  { $inc: { age: 1 } }
);

// Upsert example (create if not exists)
db.students.updateOne(
  { name: "Grace Kim" },
  { $set: { age: 22, course: "Information Systems" } },
  { upsert: true }
);

/* -------- Deletes -------- */
// Delete one by id
db.students.deleteOne({ _id: bobId });

// Bulk delete by filter
db.students.deleteMany({ course: "Civil Engineering" });

/* -------- Final checks -------- */
db.students.find({}).sort({ createdAt: 1 });
db.students.countDocuments({});

