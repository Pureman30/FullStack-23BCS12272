import express from 'express';
import mongoose from 'mongoose';
import dotenv from 'dotenv';
import cors from 'cors';

dotenv.config();
const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// Connect to MongoDB
const { MONGODB_URI, PORT = 3000 } = process.env;
mongoose
  .connect(MONGODB_URI, { dbName: 'nimbus_products' })
  .then(() => console.log('MongoDB connected'))
  .catch(err => {
    console.error('MongoDB connection error:', err.message);
    process.exit(1);
  });

// Product schema and model
const productSchema = new mongoose.Schema(
  {
    name: {
      type: String,
      required: [true, 'Name is required'],
      trim: true,
      minlength: [2, 'Name must be at least 2 characters']
    },
    price: {
      type: Number,
      required: [true, 'Price is required'],
      min: [0, 'Price cannot be negative']
    },
    category: {
      type: String,
      required: [true, 'Category is required'],
      enum: {
        values: ['Electronics', 'Accessories', 'Stationery', 'Grocery', 'Other'],
        message: 'Category must be a valid option'
      }
    }
  },
  { timestamps: true }
);

// Built-in validation runs on .save(); for findByIdAndUpdate use runValidators option [web:6][web:8]
const Product = mongoose.model('Product', productSchema);

// Health
app.get('/', (_req, res) => res.json({ status: 'ok' }));

// CREATE
app.post('/products', async (req, res) => {
  try {
    const product = await Product.create(req.body); // validates per schema [web:8]
    res.status(201).json(product);
  } catch (err) {
    res.status(400).json({ error: 'Validation failed', details: err.message });
  }
});

// READ all
app.get('/products', async (_req, res) => {
  try {
    const products = await Product.find(); // model query API [web:8]
    res.json(products);
  } catch (err) {
    res.status(500).json({ error: 'Failed to fetch products' });
  }
});

// READ by id
app.get('/products/:id', async (req, res) => {
  try {
    const doc = await Product.findById(req.params.id); // findById helper [web:8]
    if (!doc) return res.status(404).json({ error: 'Product not found' });
    res.json(doc);
  } catch {
    res.status(400).json({ error: 'Invalid id format' });
  }
});

// UPDATE by id
app.put('/products/:id', async (req, res) => {
  try {
    const updated = await Product.findByIdAndUpdate(
      req.params.id,
      req.body,
      {
        new: true,             // return modified document [web:9]
        runValidators: true,   // enforce schema validators on update [web:8][web:6]
        context: 'query'
      }
    );
    if (!updated) return res.status(404).json({ error: 'Product not found' });
    res.json(updated);
  } catch (err) {
    res.status(400).json({ error: 'Update failed', details: err.message });
  }
});

// DELETE by id
app.delete('/products/:id', async (req, res) => {
  try {
    const deleted = await Product.findByIdAndDelete(req.params.id); // shorthand for findOneAndDelete({_id}) [web:8]
    if (!deleted) return res.status(404).json({ error: 'Product not found' });
    res.json({ message: 'Product deleted', product: deleted });
  } catch {
    res.status(400).json({ error: 'Invalid id format' });
  }
});

app.use((err, _req, res, _next) => {
  res.status(500).json({ error: 'Server error', details: err.message });
});

app.listen(PORT, () => console.log(`API on http://localhost:${PORT}`));
